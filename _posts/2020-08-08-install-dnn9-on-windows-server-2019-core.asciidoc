= Install DNN 9 on Windows Server 2019 Core
:page-layout: post
:page-category: guide
:page-title: "Install DNN 9 on Windows Server 2019 Core"
:page-tagline: ""
:page-tags: [dnn, virtualbox, windows, powershell]
:page-liquid:
:url-asciidoctor: http://asciidoctor.org

{% include JB/setup %}

This guide describes the process of installing DNN 9 on Windows Server Core 2016/2019 VM, primarily for development purposes.
It was tested on DNN 8.0.4, DNN 9.6.2. Some things are still missing or not have detailed descriptions,
but still it will be very usefull if you are new to the Windows Server Core administration.

//more

== Setup VirtualBox VM

Install Windows Server 2019 x64 Core on e.g. VirtualBox (this is out of scope of this post),
using 32 GB dynamic VDI disk, 1 GB of RAM and UEFI. You can tweak RAM size and even shrink out virtual disk later.

You will need to configure host-only network interface.

Assuming host-only interface lease IP addresses via DHCP starting with 192.168.56.101, you should add the following line to `/etc/hosts` (Linux)
or `C:\Windows\System32\drivers\etc\hosts` (Windows):

[source]
---
192.168.56.101	dnn9.local
---

If you'll need multilanguage website (good for development), it is advisable to have separate aliases for different languages:

[source]
---
192.168.56.101	dnn9.local
192.168.56.101	dnn9-ru.local
--

== Tip: Multiple console windows inside Server Core:

[Ctrl+Alt+Del] -> Task Manager -> File/Run new task -> cmd/powershell

== Install IIS

List of installed features:

[source,powershell]
---
Get-WindowsFeature
---

Install IIS and ASP.NET:

[source,powershell]
---
Install-WindowsFeature Web-Server
Install-WindowsFeature Web-Asp-Net-45
---

== Install Far file manager

[source,powershell]
---
wget far-manager.ru/files/Far_Manager_v3.0_build_4455.zip -UseBasicParsing -OutFile far.zip
Expand-Archive far.zip -DestinationPath .
./far-???.msi
---

You probably want to add far command to the PATH.

- https://stackoverflow.com/questions/9546324/adding-directory-to-path-environment-variable-in-windows

Most simple way is to use regedit. User variables are at `HKCU\Environment`, system variables are at `HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment`.

== Install SQL Server Express/Developer

- https://docs.microsoft.com/ru-ru/sql/database-engine/install-windows/install-sql-server-from-the-command-prompt?view=sql-server-2017
- https://anikinsv.blogspot.com/2018/08/ms-sql.html
- https://system-administrators.info/?p=6506
- https://mssqltrek.com/2011/08/23/installing-sql-server-from-command-linecmd/

Get the SQL Express 2019 downloader: 

[source,powershell]
---
wget https://go.microsoft.com/fwlink/?linkid=866658 -UseBasicParsing -OutFile sqlexpress.exe 
---

Run ./sqlexpress.exe - can proceed with GUI from now to download real installer.
After that, find and run SETUP.EXE - this will require some command-line switches.

GUI wizard:

[source,powershell]
---
./SETUP.EXE /UIMODE=EnableUIOnServerCore /Action=Install
---

Command-line:

[source,powershell]
---
./SETUP.EXE /Q /Action=Install /SECURITYMODE=SQL /SAPWD="MyP@$$w0rd" /TCPENABLED=1 /FEATURES=SQLEngine /ADDCURRENTUSERASSQLADMIN 
---

== Create new (empty) database and the database owner user:

- https://www.mssqltips.com/sqlservertip/6223/create-sql-server-database-with-powershell/

Create folder to store databases:

[source,powershell]
---
mkdir C:\Databases
---

Configure permissions (see below) for "NT Service\MSSQLSERVER", "FullControl"

TODO: Create separate database owner user, not use sa!

Create the `CreateDnn9Database.sql` file somewhere:

[source,sql]
---
use master;
go

create database Dnn9
  on (name = N'Dnn9', filename = N'C:\Databases\Dnn9.mdf')
  log on (name = N'Dnn9_log', filename = N'C:\Databases\Dnn9_log.ldf');
go

alter authorization on database::Dnn9 to sa
go
---

[source,powershell]
---
Install-Module -Name "SqlServer"
Invoke-SqlCmd -ServerInstance "(local)" -InputFile "CreateDnn9Database.sql"
---

== Configure firewall

Get rules:

[source,powershell]
---
Get-NetFirewallRule | Where Name -like "*ICMP4*"
---

Allow ping:

[source,powershell]
---
Set-NetFirewallRule -Name FPS-ICMP4-ERQ-In -Enabled True -Profile Any -Action Allow
---

Allow external connections to IIS via HTTP (80): this is done by default by adding webserver role, rule names: IIS-WebServerRole-HTTP-In-TCP and IIS-WebServerRole-HTTPS-In-TCP.

Allow inbound SMB for shared folders:

[source,powershell]
---
Set-NetFirewallRule -Name FPS-SMB-In-TCP  -Enabled True -Profile Any -Action Allow
---

TODO: Optionally, allow external connections to the SQL Server (to use later with e.g. DBeaver):

== Download and unpack DNN

[source,powershell]
---
wget https://github.com/dnnsoftware/Dnn.Platform/releases/download/v9.6.2/DNN_Platform_9.6.2_Install.zip -UseBasicParsing -OutFile dnn9.zip
Expand-Archive dnn9.zip -DestinationPath C:\Dnn9
---

== Add site and app pool to IIS

- https://www.itprotoday.com/powershell/managing-internet-information-services-iis-powershell-snap
- https://octopus.com/blog/iis-powershell
- https://docs.microsoft.com/ru-ru/powershell/module/iisadministration/New-IISSite?view=win10-ps

Semo-old way:

[source,powershell]
---
Import-Module WebAdministration
cd IIS:\
ls
---

New way:

[source,powershell]
---
Import-Module IISAdministration 
New-IISSite -Name dnn9.local -BindingInformation ":80:dnn9.local" -Protocol http -PhysicalPath C:\Dnn9 
---

But this will not create the "dnn9.local" app pool!

Create new AppPool and bind to the website:

[source,powershell]
---
Import-Module WebAdministration
New-WebAppPool -Name "dnn9.local"
Set-ItemProperty "IIS:\Sites\dnn9.local" -Name "applicationPool" -Value "dnn9.local"
--

Check:

[source,powershell]
---
ls "IIS:\AppPools"
---

== Configure FS permissions

- https://stackoverflow.com/questions/25779423/powershell-to-set-folder-permissions#25780422

[source,powershell]
---
$acl = Get-Acl "C:\Dnn9"
$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS_IUSRS", "ReadAndExecute", "ContainerInherit,ObjectInherit", "None", "Allow")
$acl.SetAccessRule($accessRule)
Set-Acl "C:\Dnn9" $acl
$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS APPPOOL\dnn9.local", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
$acl.SetAccessRule($accessRule)
Set-Acl "C:\Dnn9" $acl
---

Check: 

[source,powershell]
---
Get-Acl "C:\Dnn9" | Format-List`
---

== Make website folder shared for local deploy

[source,powershell]
---
Install-WindowsFeature FS-SMB1-SERVER
#optional: Enable-WindowsOptionalFeature -Online -FeatureName smb1protocol
New-SMBShare -Name "Dnn9" -Path "C:\Dnn9" -FullAccess "Administrator"
---

Test by trying to connect share by IP (\\192.168.56.101\Dnn9), not hostname!

== Run DNN install

Access http://dnn9.local from a web browser on host machine and follow instructions!

Database Setup: Custom
Server Name: (local)
Database Name: Dnn9
Database Username: sa
