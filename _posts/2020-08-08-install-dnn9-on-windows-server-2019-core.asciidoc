= Install DNN 9 on Windows Server 2019 Core
:page-layout: post
:page-category: guide
:page-title: "Install DNN 9 on Windows Server 2019 Core"
:page-tagline: ""
:page-tags: [dnn, virtualbox, windows, powershell]
:page-liquid:
:experimental:
:source-highlighter: rouge
:url-asciidoctor: http://asciidoctor.org

{% include JB/setup %}

This guide describes the process of installing DNN 9 on Windows Server Core 2016/2019 VM for development purposes.
It is tested on DNN 8.0.4, DNN 9.6.2 and DNN 9.8.0. Some things are still missing or don't have detailed description,
but I hope it still will be helpful, especially if you are new to the Windows Server Core administration.

//more

== Setup VirtualBox VM and networking

Install *Windows Server 2019 x64 Core* on e.g. *VirtualBox* (out of scope of this post),
using 32 GB dynamic VDI disk, 1 GB of RAM and UEFI. You can tweak RAM size and resize virtual disk later.

You will need to configure host-only network interface, which will allow connections between virtual and host machines.
Of cause, there are more https://www.virtualbox.org/manual/ch06.html[virtual networking] options.

Assuming that DHCP server of host-only interface is configured to lease IP addresses starting with 192.168.56.101, you should add the following line to `/etc/hosts` (on Linux) or `C:\Windows\System32\drivers\etc\hosts` (on Windows):

[source]
----
192.168.56.101	dnn980.hostname.local
----

If you'll need multilanguage website, it is good to have separate alias for each of target languages:

[source]
----
192.168.56.101	dnn980.hostname.local
192.168.56.101	de.dnn980.hostname.local
192.168.56.101	ru.dnn980.hostname.local
...
----

== Install IIS

List of currently installed features:

[source,powershell]
----
Get-WindowsFeature
----

Install IIS and ASP.NET:

[source,powershell]
----
Install-WindowsFeature Web-Server
Install-WindowsFeature Web-Asp-Net45
----

== Install SQL Server Express/Developer

- https://docs.microsoft.com/ru-ru/sql/database-engine/install-windows/install-sql-server-from-the-command-prompt?view=sql-server-2017
- https://anikinsv.blogspot.com/2018/08/ms-sql.html
- https://system-administrators.info/?p=6506
- https://mssqltrek.com/2011/08/23/installing-sql-server-from-command-linecmd/

Get and run the SQL Express 2019 *downloader*: 

[source,powershell]
----
wget https://go.microsoft.com/fwlink/?linkid=866658 -UseBasicParsing -OutFile sqlexpress.exe
./sqlexpress.exe
----

Proceed with GUI wizard from now to download *real installer*.

After downloading real installer, find and run `SETUP.EXE` - this will require some command-line switches.

Good old GUI wizard:

[source,shell]
----
./SETUP.EXE /UIMODE=EnableUIOnServerCore /Action=Install
----

Command-line:

[source,shell]
----
./SETUP.EXE /Q /Action=Install /SECURITYMODE=SQL /SAPWD="MyP@$$w0rd" /TCPENABLED=1 /FEATURES=SQLEngine /ADDCURRENTUSERASSQLADMIN 
----

== Create the database for DNN

- https://www.mssqltips.com/sqlservertip/6223/create-sql-server-database-with-powershell/

Create folder to store databases:

[source,powershell]
----
mkdir C:\Databases
----

Configure permissions:

[source,powershell]
----
$acl = Get-Acl "C:\Databases"
$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("NT Service\MSSQLSERVER", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
$acl.SetAccessRule($accessRule)
Set-Acl "C:\Databases" $acl
----

Create the `CreateDnn980Database.sql` file somewhere:

.CreateDnn980Database.sql
[source,sql]
----
use master;
go

create database Dnn980
  on (name = N'Dnn980', filename = N'C:\Databases\Dnn980.mdf')
  log on (name = N'Dnn980_log', filename = N'C:\Databases\Dnn980_log.ldf');
go

alter authorization on database::Dnn980 to sa
go
----

Execute it:

[source,powershell]
----
Invoke-SqlCmd -ServerInstance "(local)" -InputFile "CreateDnn980Database.sql"
----

== Configure firewall

Get the current rules, e.g. related to ICMP:

[source,powershell]
----
Get-NetFirewallRule | Where Name -like "*ICMP*"
----

Allow ping:

[source,powershell]
----
Set-NetFirewallRule -Name FPS-ICMP4-ERQ-In -Enabled True -Profile Any -Action Allow
----

Allow external connections to IIS via HTTP (port 80):

This is done by default by adding webserver role, rule names `IIS-WebServerRole-HTTP-In-TCP` and `IIS-WebServerRole-HTTPS-In-TCP`.

Allow inbound SMB for shared folders:

[source,powershell]
----
Set-NetFirewallRule -Name FPS-SMB-In-TCP  -Enabled True -Profile Any -Action Allow
----

== Download and unpack DNN

[source,powershell]
----
wget https://github.com/dnnsoftware/Dnn.Platform/releases/download/v9.6.2/DNN_Platform_9.6.2_Install.zip -UseBasicParsing -OutFile dnn980.zip
Expand-Archive dnn980.zip -DestinationPath C:\Dnn980
rm dnn980.zip
----

== Add website and application pool in IIS

- https://www.itprotoday.com/powershell/managing-internet-information-services-iis-powershell-snap
- https://docs.microsoft.com/ru-ru/powershell/module/iisadministration/New-IISSite?view=win10-ps
- https://octopus.com/blog/iis-powershell

[source,powershell]
----
Import-Module IISAdministration 
New-IISSite -Name dnn980.hostname.local -BindingInformation "*:80:dnn980.hostname.local" -Protocol http -PhysicalPath C:\Dnn980 
----

You can easily manipulate binding information for the website using `New-WebBinding` and `Remove-WebBinding` commandlets:

[source,powershell]
----
Import-Module WebAdministration
Remove-WebBinding -Name dnn980.hostname.local -HostHeader dnn980.hostname.local 
New-WebBinding -Name dnn980.hostname.local -port 443 -Protocol https -HostHeader dnn980.hostname.local
----

**But this will not create the application pool for the new website!**

Create new application pool and bind it to the website:

[source,powershell]
----
Import-Module WebAdministration
New-WebAppPool -Name "dnn980.hostname.local"
Set-ItemProperty "IIS:\Sites\dnn980.hostname.local" -Name "applicationPool" -Value "dnn980.hostname.local"
----

Check:

[source,powershell]
----
Import-Module WebAdministration
ls "IIS:\AppPools"
----

This will list all websites and corresponding application pools.

== Configure file system permissions

- https://stackoverflow.com/questions/25779423/powershell-to-set-folder-permissions#25780422

[source,powershell]
----
$acl = Get-Acl "C:\Dnn980"
$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS_IUSRS", "ReadAndExecute", "ContainerInherit,ObjectInherit", "None", "Allow")
$acl.SetAccessRule($accessRule)
Set-Acl "C:\Dnn980" $acl
$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS APPPOOL\dnn980.hostname.local", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
$acl.SetAccessRule($accessRule)
Set-Acl "C:\Dnn980" $acl
----

Check: 

[source,powershell]
----
Get-Acl "C:\Dnn980" | Format-List
----

== Share website folder

You will probably need the website folder to be accessible via share,
so you can setup automatic deployment of build output from IDE into it.  

[source,powershell]
----
Install-WindowsFeature FS-SMB1-SERVER
# Optional?
# Enable-WindowsOptionalFeature -Online -FeatureName smb1protocol

New-SMBShare -Name "Dnn980" -Path "C:\Dnn980" -FullAccess "Administrator"
----

Test this by trying to access share by IP like that: `\\192.168.56.101\Dnn980`.

== Run DNN install

Access \http://dnn980.hostname.local from a web browser on host machine and follow installation wizard!

Database setup form fields:

Database Setup:: Custom
Database Type:: SQL Server/SQL Server Express Database
Server Name:: (local)
Database Name:: Dnn980
Database Username:: sa

== Extra

=== Install Far file manager

[source,powershell]
----
wget far-manager.ru/files/Far_Manager_v3.0_build_4455.zip -UseBasicParsing -OutFile far.zip
Expand-Archive far.zip -DestinationPath .
./Far30b4455.x64.20151115.msi
----

Now you will probably want to add `far` command to the `PATH`.

- https://stackoverflow.com/questions/9546324/adding-directory-to-path-environment-variable-in-windows

Most simple way to do it is via `regedit`. User environment variables are at `HKCU\Environment`, system variables are at `HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment`.

=== Multiple console windows

Press kbd:[Ctrl+Alt+Del], select **Task Manager**, then run `cmd.exe` or `powershell.exe` via menu:File[Run new task] menu.

== TODO

- Separate initial configuration and adding new DNN instances
- Create separate database owner for each database
- Configure firewall to allow external connections to the SQL Server: https://docs.microsoft.com/en-us/sql/sql-server/install/configure-the-windows-firewall-to-allow-sql-server-access?view=sql-server-ver15
- Further integration (probably out of scope):
  https://github.com/roman-yagodin/vm-scripts[vm-scripts], `/etc/fstab` entries for shares, deploy build output to the share, etc.
